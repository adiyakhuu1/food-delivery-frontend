generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}
model FoodCategory {
  id        String   @id @default(nanoid()) 
  createdAt DateTime @default(now())
  name      String

  @@map("food-category")
  Foods Foods[]
}

model FoodOrderItem {
  id         String     @id @default(nanoid()) 
  createdAt  DateTime?  @db.Date @default(now())
  food       Foods      @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId     String    
  quantity   Int
  foodOrder  FoodOrder? @relation("OrderToItems", fields: [foodOrderId], references: [id], onDelete: SetNull)
  foodOrderId String?   

  @@map("foodorderitems")
}

model FoodOrder {
  id             String          @id @default(nanoid()) 
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String        
  createdAt      DateTime        @default(now())
  status String @default("PENDING")
  totalPrice     Int
  address String
  foodOrderItems FoodOrderItem[] @relation("OrderToItems")

  @@index([createdAt], map: "createdAt_1")
  @@map("foodorders")
}

model Foods {
  id          String       @id @default(nanoid()) 
  foodName    String
  price       Int
  image       String?
  ingredients String
  createdAt   DateTime @default(now())
  categoryId  String       
  category    FoodCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  FoodOrderItem FoodOrderItem[]
  @@map("foods")
}


model User {
  id           String       @id @default(nanoid())
  createdAt    DateTime @default(now())
  email        String @unique
  password     String
  role         String @default("ADMIN")
  OTP OTP[]
  orderedFoods FoodOrder[]

  @@map("users")
}
model OTP {
  id           String       @id @default(nanoid())
  createdAt    DateTime @default(now())
  email        String 
  OTP          Int
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}